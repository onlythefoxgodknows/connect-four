{"version":3,"sources":["Navbar.js","About.js","Contact.js","History.js","Rules.js","Game.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","to","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","target","href","React","Component","About","Contact","History","Rules","Game","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8SAGqBA,E,uKAEb,OACI,yBAAKC,UAAU,kDACX,kBAAC,IAAD,CAAMA,UAAW,eAAgBC,GAAI,KAArC,gBACA,4BAAQD,UAAU,iBAAiBE,KAAK,SAASC,cAAY,WACrDC,cAAY,0BAA0BC,gBAAc,yBACpDC,gBAAc,QAAQC,aAAW,qBACrC,0BAAMP,UAAU,yBAGpB,yBAAKA,UAAU,2BAA2BQ,GAAG,0BACzC,wBAAIR,UAAU,sBACV,wBAAIA,UAAU,mBACV,kBAAC,IAAD,CAAMA,UAAU,WAAWC,GAAI,UAA/B,sBAEJ,wBAAID,UAAU,mBACV,kBAAC,IAAD,CAAMA,UAAU,WAAWC,GAAI,YAA/B,8BAEJ,wBAAID,UAAU,mBACV,uBAAGS,OAAO,SAAST,UAAU,WAAWU,KAAK,gaAA7C,yBAAke,0BAAMV,UAAU,WAAhB,eAEte,wBAAIA,UAAU,mBACV,kBAAC,IAAD,CAAMA,UAAU,WAAWC,GAAI,UAA/B,wBAEJ,wBAAID,UAAU,mBACV,kBAAC,IAAD,CAAMA,UAAU,WAAWC,GAAI,YAA/B,sB,GA1BQU,IAAMC,WCDrBC,E,uKAEb,OACI,yC,GAHuBF,IAAMC,WCApBE,E,uKAEb,OACI,2C,GAHyBH,IAAMC,WCAtBG,E,uKAEb,OACI,2C,GAHyBJ,IAAMC,WCAtBI,E,uKAEb,OACI,6BACI,0C,GAJmBL,IAAMC,WCApBK,E,uKAEb,OACI,wC,GAHsBN,IAAMC,WCwCzBM,MAzBf,WACE,OACI,kBAAC,IAAD,KACI,kBAAC,EAAD,MACA,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,KACR,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOA,KAAK,UACR,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOA,KAAK,YACR,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOA,KAAK,YACR,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOA,KAAK,UACR,kBAAC,EAAD,UCvBEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.57b6a7d0.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default class Navbar extends React.Component{\r\n    render() {\r\n        return (\r\n            <nav className=\"navbar navbar-expand-lg navbar-dark bg-primary\">\r\n                <Link className={\"navbar-brand\"} to={\"/\"}>Connect Four</Link>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\"\r\n                        data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\"\r\n                        aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav mr-auto\">\r\n                        <li className=\"nav-item active\">\r\n                            <Link className=\"nav-link\" to={\"/rules\"}>Rules of the Game</Link>\r\n                        </li>\r\n                        <li className=\"nav-item active\">\r\n                            <Link className=\"nav-link\" to={\"/history\"}>Brief History of the Game</Link>\r\n                        </li>\r\n                        <li className=\"nav-item active\">\r\n                            <a target=\"_blank\" className=\"nav-link\" href=\"https://www.google.com/search?sxsrf=ALeKk01imzEpZCxYMR_Ai4MvPkxSkL8QGg%3A1594511471296&source=hp&ei=b1AKX9fvDoXDytMP8vexmAU&q=connect+four&oq=connect+four&gs_lcp=CgZwc3ktYWIQAzIFCAAQsQMyBQgAELEDMgIIADICCAAyAggAMgIIADICCAAyAggAMgIIADICCAA6BAgjECc6BQgAEJECOggIABCxAxCDAToECAAQQzoHCAAQsQMQClDHBljOFmDvF2gAcAB4AIABXIgBrQeSAQIxMpgBAKABAaoBB2d3cy13aXo&sclient=psy-ab&ved=0ahUKEwiX49WOssbqAhWFoXIEHfJ7DFMQ4dUDCAk&uact=5\">Link to Google Search <span className=\"sr-only\">(current)</span></a>\r\n                        </li>\r\n                        <li className=\"nav-item active\">\r\n                            <Link className=\"nav-link\" to={\"/about\"}>About the Developer</Link>\r\n                        </li>\r\n                        <li className=\"nav-item active\">\r\n                            <Link className=\"nav-link\" to={\"/contact\"}>Contact Us</Link>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class About extends React.Component {\r\n    render() {\r\n        return(\r\n            <h1>About</h1>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class Contact extends React.Component {\r\n    render() {\r\n        return(\r\n            <h1>Contact</h1>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class History extends React.Component {\r\n    render() {\r\n        return(\r\n            <h1>History</h1>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class Rules extends React.Component {\r\n    render() {\r\n        return(\r\n            <div>\r\n                <h1>Rules</h1>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\nexport default class Game extends React.Component {\r\n    render() {\r\n        return(\r\n            <h1>Game</h1>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport  {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Link\n} from \"react-router-dom\";\n\nimport './App.css';\n\nimport Navbar from './Navbar';\nimport About from './About';\nimport Contact from './Contact';\nimport History from './History';\nimport Rules from './Rules';\nimport Game from './Game';\n\nfunction App() {\n  return (\n      <Router>\n          <Navbar />\n          <Switch>\n              <Route path=\"/\">\n                  <Game />\n              </Route>\n              <Route path=\"/about\">\n                  <About />\n              </Route>\n              <Route path=\"/contact\">\n                  <Contact />\n              </Route>\n              <Route path=\"/history\">\n                  <History />\n              </Route>\n              <Route path=\"/rules\">\n                  <Rules />\n              </Route>\n          </Switch>\n      </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}